* {
  margin: 0;
  padding: 0;
}
html,
body {
  width: 100%;
  height: 100%;
  background-color: #98f5ff;
  /*实现文字居中显示，直接作用html,body即可*/
  display: flex;
  justify-content: center;
  align-items: center;
}
/* 小怪物 */
.monster {
  width: 110px;
  height: 100px;
  background-color: #e55a54;
  border-radius: 20px;
  position: relative;
  margin: 10px;
  /*这里的居中会作用在眼睛和嘴巴身上*/
  display: flex;
  justify-content: center;
  align-items: center;
  /*都设置了display:flex;嘴巴和眼睛都成了水平居中，要实现列排序*/
  flex-direction: column; /*按列排序：嘴和眼睛*/
  animation: jumping 0.8s infinite alternate;
  /*animation:name,执行时间,无限循环,切换做动画：0--50,-50-0都有动画*/
}
.monster .eye {
  width: 40%;
  height: 40%; /*基于父级的40%*/
  border-radius: 50%; /*本应是圆，但是宽高不一样，所以成立小椭圆*/
  background-color: #fff;
  /*实现眼球初始化在眼睛里面居中*/
  display: flex;
  justify-content: center;
  align-items: center;
}
.monster .eye .eyeball {
  width: 50%;
  height: 50%;
  border-radius: 50%; /*小椭圆*/
  background-color: #0c4475;
  animation: eyemove 1.6s infinite alternate;
}
.monster .mouth {
  width: 32%;
  height: 12px;
  border-radius: 12px;
  background-color: #fff;
  margin-top: 15%; /*实现嘴和眼睛分开距离*/
}
/*伪元素*/
/*小心心用两个极限椭圆旋转45°拼接实现*/
/*伪元素三件套*/
.monster::before,
.monster::after {
  content: "";
  display: block;
  width: 20%;
  height: 10px;
  background-color: #ffc;
  border-radius: 10px;
  position: absolute;
  /*基于monster定位，so给monster加一个position:relative;
    absolute会找离他最近有定位的父级进行定位*/
  left: 50%;
  top: -10px;
}
/*平移和旋转：transform*/
.monster::before {
  transform: translateX(-70%) rotate(45deg);
  /*-表示往左边移，rotate旋转正45度*/
}
.monster::after {
  transform: translateX(-30%) rotate(-45deg);
}
.monster.blue {
  background-color: #0c4475;
  animation-delay: 0.5s; /*蓝色延迟*/
}
.monster.blue .eyeball,
.monster.blue .mouth {
  background-color: #e55a54;
}
/* 跳跃 */
@keyframes jumping {
  0% {
    top: 0;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);
  }
  50% {
    top: 0;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2); /*没开始跳动时，初始阴影*/
  }
  100% {
    top: -50px;
    box-shadow: 0px 120px 50px rgba(0, 0, 0, 0.1); /*跳起来，竖直阴影变大*/
  }
}

/* 眼睛运动：水平运动 */
@keyframes eyemove {
  /*实现到边界，都缓冲一下：0% 10%*/
  0%,
  10% {
    transform: translate(50%); /*左右移动*/
  }
  90%,
  100% {
    transform: translate(-50%); /*左右移动*/
  }
}

h2,
h3 {
  color: #fff;
  font-size: 40px;
  margin-right: 50px;
}
/* 第一页 */
.pageLoading {
  position: fixed;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  background-color: #0c4475;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  transition: opacity 0.5s 0.5s;
}
.pageLoading .loading {
  width: 200px;
  height: 8px;
  margin-top: 80px;
  border-radius: 5px;
  background-color: #fff;
  overflow: hidden;
}
.pageLoading .loading .bar {
  background-color: #e55a54;
  width: 0%; /*初始值为0，用js让width增加*/
  height: 100%;
}
.pageLoading.complate {
  opacity: 0;
}
.pageLoading.complate .monster {
  transition: 0.5s;
  transform: scale(0.1) rotate(360deg);
  /*旋转一圈*/
}

/*1.定位：position
2.居中方法：
    (1)margin
    (2)auto
    (3)top 0
    (4)50%
    (5)负的自身宽高
    (6)弹性盒子
        1、不知道子集
            display:flex;
            justify-content: center;
            align-items: center;
        2、知道子集
            就用translate*/
/*3.box-shallow:x偏移量，y偏移量，当前阴影的距离，阴影颜色值*/
